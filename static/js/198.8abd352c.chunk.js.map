{"version":3,"file":"static/js/198.8abd352c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","webpack://react-homework-template/./src/components/MovieList/MovieListItem/MovieListItem.module.css?166d","components/MovieList/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","webpack://react-homework-template/./src/components/FilterForm/FilterForm.module.css?6686","components/FilterForm/FilterForm.jsx","pages/Movies.jsx","services/moviesAPI.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie-list\":\"MovieList_movie-list__vTqZL\"};","// extracted by mini-css-extract-plugin\nexport default {\"movie-list__item\":\"MovieListItem_movie-list__item__x0-A3\",\"movie-card\":\"MovieListItem_movie-card__T0y2W\",\"thumb\":\"MovieListItem_thumb__faLDZ\",\"item-img\":\"MovieListItem_item-img__FZh4q\",\"item-info\":\"MovieListItem_item-info__S9TK9\",\"item-title\":\"MovieListItem_item-title__O3SY7\",\"item-year\":\"MovieListItem_item-year__VpryL\"};","import { Link, useLocation } from \"react-router-dom\";\n\nimport { moviesAPI } from \"services/moviesAPI\"\nimport defaultImg from \"../../../images/defaultPoster.jpeg\";\nimport css from \"./MovieListItem.module.css\";\nimport PropTypes from 'prop-types';\n\nconst MovieListItem = ({poster, name, title, releaseDate, commonDate, id}) => {\n\n    const location = useLocation();\n\n\n    const posterPath = poster ? `${moviesAPI.imgBaseURL}${poster}` : defaultImg;\n\n    const year = (releaseDate || commonDate) ? (releaseDate || commonDate).slice(0, 4) : 'unknown';\n\n    return (\n        <li key={id} className={css['movie-list__item']}>\n        <Link to={`/movies/${id}`} state={{ from: location }}> \n            <div className={css['movie-card']}>\n            <div className={css.thumb}>\n            <img src={posterPath} alt={title || name} width={240} className={css['item-img']}/>\n            </div>\n            <div className={css['item-info']}>\n            <h2 className={css['item-title']}>{title || name}</h2>\n            <p className={css['item-year']}>{year}</p>\n            </div>\n            </div>\n        </Link>\n    </li>\n    )\n\n}\n\nMovieListItem.propTypes = {\n    poster: PropTypes.string,\n    name: PropTypes.string,\n    title: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    releaseDate: PropTypes.string,\n    commonDate: PropTypes.string,\n}\n\nexport default MovieListItem;","import css from \"./MovieList.module.css\";\nimport MovieListItem from \"./MovieListItem/MovieListItem\";\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({movies}) => {\n\n    return (\n        <ul className={css['movie-list']}>\n            {movies.map(({id, poster_path, name, title, release_date, first_air_date}) => \n            <MovieListItem\n                key={id}\n                id={id}\n                poster={poster_path}\n                name={name}\n                title={title}\n                releaseDate={release_date}\n                commonDate={first_air_date}\n            />)}\n        </ul>\n    )\n}\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.number.isRequired,\n          poster_path: PropTypes.string,\n          name: PropTypes.string,\n          title: PropTypes.string,\n          release_date: PropTypes.string,\n          first_air_date: PropTypes.string,\n        }),\n    ).isRequired,\n}\n\nexport default MovieList;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FilterForm_form__pLxxp\",\"input\":\"FilterForm_input__NJviq\",\"search-btn\":\"FilterForm_search-btn__ROxPk\"};","import { useState } from \"react\";\nimport css from \"./FilterForm.module.css\";\nimport PropTypes from 'prop-types';\n\nconst FilterForm = ({onSubmit}) => {\n\n    const [query, setQuery] = useState('')\n\n    const handleChangeQuery = (e) => {\n        setQuery(e.currentTarget.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (query.trim() === '') {\n            return alert('Enter search query...');\n        }\n    \n        onSubmit(query);\n        setQuery('')\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n        <label>\n         <input type=\"text\" name={query} value={query} onChange={handleChangeQuery} className={css.input}\n         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n         title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n         placeholder=\"Enter query to search movies\"\n         />\n        </label>\n        <button type=\"submit\" className={css['search-btn']}>Search</button>\n     </form>\n    )\n}\n\nFilterForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nexport default FilterForm;","import FilterForm from \"components/FilterForm/FilterForm\";\nimport Loader from \"components/Loader/Loader\";\nimport MovieList from \"components/MovieList/MovieList\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { moviesAPI } from \"services/moviesAPI\";\n\n\nconst Movies = () => {\n\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n\n\n    useEffect(() => {\n        if (!query) return;\n\n        const controller = new AbortController();\n        const { signal } = controller;\n\n        const loadMovies = async () => {\n            try {\n                setIsLoading(true);\n\n                const data = await moviesAPI.getMovies(query, signal);\n                \n                if (data.results.length === 0) {\n                    setError(\"Movies with this query weren't found. Please enter valid query and try again!\")\n                    return\n                }\n\n                setMovies(data.results);\n            } catch (error) {\n                setError(\"Something went wrong. Please try again later!\");\n            } finally {\n                setIsLoading(false);\n            }\n        } \n\n        loadMovies()\n        \n        return () =>  controller.abort();\n\n    }, [query])\n \n    const onFilterSubmit = (query) => {\n        setError(null)\n        setSearchParams({query})\n    }\n\n    return (\n        <section>\n            <h1 className=\"visually-hidden\">Search movies</h1>\n            <FilterForm onSubmit={onFilterSubmit}/>\n            {isLoading && <Loader/>}\n            {error && <div>{error}</div>}\n            {movies.length !== 0 && <MovieList movies={movies} /> }\n        </section>\n    )\n}\n\nexport default Movies;","const API_KEY = 'ef2f22bb4de9529af845b70082225b5a';\nconst imgBaseURL = 'https://image.tmdb.org/t/p/w500'\n\n\nconst fetchTrending = async (signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n\n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieByQuery = async (query, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieDetails = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieCast = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieReviews = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nexport const moviesAPI = {\n    getTrending: fetchTrending,\n    getMovies: fetchMovieByQuery,\n    getDetails: fetchMovieDetails,\n    getCast: fetchMovieCast,\n    getReviews: fetchMovieReviews,\n    imgBaseURL,\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["poster","name","title","releaseDate","commonDate","id","location","useLocation","posterPath","moviesAPI","defaultImg","year","slice","className","css","to","state","from","src","alt","width","movies","map","poster_path","release_date","first_air_date","onSubmit","useState","query","setQuery","e","preventDefault","trim","alert","type","value","onChange","currentTarget","pattern","placeholder","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","controller","AbortController","signal","loadMovies","data","results","length","abort","Loader","MovieList","API_KEY","fetchTrending","fetchURL","fetch","response","ok","Error","status","json","fetchMovieByQuery","fetchMovieDetails","movieID","fetchMovieCast","fetchMovieReviews","getTrending","getMovies","getDetails","getCast","getReviews","imgBaseURL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}