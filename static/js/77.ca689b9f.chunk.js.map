{"version":3,"file":"static/js/77.ca689b9f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/CastItem/CastItem.module.css?aa36","components/Cast/CastItem/CastItem.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/moviesAPI.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CastItem_item__-EXbK\",\"accent\":\"CastItem_accent__132hB\"};","import { moviesAPI } from \"services/moviesAPI\"\nimport defaultImgM from \"../../../images/defaultProfileM.png\";\nimport defaultImgF from \"../../../images/defaultProfileF.png\";\nimport css from \"./CastItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst CastItem = ({name, character, img, gender}) => {\n\n    // back-end can return gender === 0 irrespective of person's real gender,\n    // so we just ignore this case and set \"male\" default img\n    const defaultImg = gender === 1 ? defaultImgF : defaultImgM;\n\n    const imgPath = img ? `${moviesAPI.imgBaseURL}${img}` : defaultImg;\n\n    return (\n        <li className={css.item}> \n            <img src={imgPath} alt={name} width={120}/>\n            <h3>{name}</h3>\n            <p><span className={css.accent}>Character: </span>\n                {character ? ` ${character}` : ' unknown'}\n            </p>\n        </li>\n    )\n\n}\n\nCastItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string,\n    img: PropTypes.string,\n    gender: PropTypes.number.isRequired,\n}\n\nexport default CastItem;","// extracted by mini-css-extract-plugin\nexport default {\"cast-list\":\"Cast_cast-list__ond-A\"};","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { moviesAPI } from \"services/moviesAPI\";\n\nimport  Loader  from \"components/Loader/Loader\";\nimport CastItem from \"./CastItem/CastItem\";\nimport css from \"./Cast.module.css\";\n\nconst Cast = () => {\n\n    const {movieId} = useParams();\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n\n        const controller = new AbortController();\n        const { signal } = controller;\n\n        setIsLoading(true);\n\n        const fetchData = async () => {\n            try {\n                const {cast} = await moviesAPI.getCast(movieId, signal);\n\n                if (cast.length === 0) {\n                    setError(\"Cast of this movie wasn't found. Please try again later.\")\n                    return\n                }\n\n                setCast(cast);\n            } catch (error) {\n                setError(\"Cast of this movie wasn't found. Please try again later.\")\n            } finally {\n                setIsLoading(false);\n            }\n        } \n\n        fetchData()\n\n        return () =>  controller.abort();\n\n    }, [movieId])\n    \n    return (\n        <>\n            {isLoading && <Loader/>}\n            {error && <div>{error}</div>}\n            {cast.length !==0 &&\n                <ul className={css['cast-list']} >\n                    {cast.filter(({known_for_department:role}) => role === 'Acting')\n                    .map(({name, character, profile_path:img, gender}) => \n                    <CastItem\n                        name={name}\n                        character={character}\n                        img={img}\n                        gender={gender}\n                        key={name + character}\n                    /> )}\n                </ul>\n            }\n        </>\n    )\n}\n\nexport default Cast;\n\n","const API_KEY = 'ef2f22bb4de9529af845b70082225b5a';\nconst imgBaseURL = 'https://image.tmdb.org/t/p/w500'\n\n\nconst fetchTrending = async (signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n\n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieByQuery = async (query, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieDetails = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieCast = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nconst fetchMovieReviews = async (movieID, signal) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n \n    const response = await fetch(fetchURL, { signal })\n\n    if (!response.ok) throw new Error (response.status)\n\n    const data = await response.json()\n    return data\n}\n\nexport const moviesAPI = {\n    getTrending: fetchTrending,\n    getMovies: fetchMovieByQuery,\n    getDetails: fetchMovieDetails,\n    getCast: fetchMovieCast,\n    getReviews: fetchMovieReviews,\n    imgBaseURL,\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["name","character","img","defaultImg","gender","defaultImgF","defaultImgM","imgPath","moviesAPI","className","css","src","alt","width","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","useEffect","controller","AbortController","signal","fetchData","length","abort","Loader","filter","known_for_department","map","profile_path","API_KEY","fetchTrending","fetchURL","fetch","response","ok","Error","status","json","data","fetchMovieByQuery","query","fetchMovieDetails","movieID","fetchMovieCast","fetchMovieReviews","getTrending","getMovies","getDetails","getCast","getReviews","imgBaseURL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}