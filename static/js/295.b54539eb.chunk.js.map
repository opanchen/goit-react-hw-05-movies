{"version":3,"file":"static/js/295.b54539eb.chunk.js","mappings":"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","sources":["pages/MovieDatails.jsx","services/moviesAPI.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useRef, useState, Suspense } from \"react\";\nimport { Link, Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { moviesAPI } from \"services/moviesAPI\";\nimport Loader from \"components/Loader/Loader\";\n\nconst MovieDatails = () => {\n\n   const { movieId } = useParams();\n\n    const [movie, setMovie] = useState(null);\n    const [error, setError] = useState('Something went wrong... Try again later.')\n    const [status, setStatus] = useState('idle')\n\n    const location = useLocation();\n    // console.log('film location: ', location);\n\n    const backLinkLocationRef = useRef(location.state?.from ?? '/movies')\n    // console.log('ref: ', backLinkLocationRef.current);\n\n\n\n    useEffect(() => {\n        setStatus('pending')\n        const fetchData = async () => {\n            try {\n                const data = await moviesAPI.getDetails(movieId)\n                if (data.success === false) {\n                    // console.log('not successfull fetch');\n                    setError('Something went wrong... Information about this movie was not found yet. Please try again later.')\n                    setStatus('rejected')\n                    return\n                }\n                setMovie(data)\n                // console.log(movieId);\n                // console.log(data);\n                setStatus('resolved')\n            } catch (error) {\n                setStatus('rejected')\n            }\n        } \n\n        fetchData()\n    \n    }, [movieId])\n\n    const renderMarkup = () => {\n        if (status === 'idle') {\n            return (\n                <div>           \n                    <b>MovieDatails:</b> сторінка з детальною інформацією про кінофільм - {movieId}.\n                    <button type=\"button\">Go back</button>\n                </div>\n            )\n        }\n    \n        if (status === 'pending') {\n           return <Loader/>\n        }\n    \n        if (status === 'resolved') {\n            // console.log(movie);\n            const imgBaseURL = 'https://image.tmdb.org/t/p/w500'\n            const { title, overview, release_date:releaseDate, genres, poster_path:poster, vote_average:vote } = movie;\n    \n            return (\n                <section style={{paddingTop: 24, paddingBottom: 24}}>\n                    { movie &&\n                    <> \n                        <div style={{outline: '1px solid teal'}}>\n                        <img src={imgBaseURL+poster} alt=\"\" width={320}/>\n                        <h2>{title} ({releaseDate})</h2>\n                        <p>User Score: {Number(vote) * 10}%  </p>\n                        <h3>Overview</h3>\n                        <p>{overview}</p>\n                        <h3>Genres</h3>\n                        <p>{genres.map(item => item.name).join(' ')}</p>\n        \n                    </div>\n                    <div>\n                        <p>Additional information</p>\n                        <ul>\n                        <li>\n                            <Link to={'cast'}>Cast</Link>\n                        </li>\n                        <li>\n                            <Link to={'reviews'}>Reviews</Link>\n                        </li>\n                    </ul>\n                    </div>\n                    </>}\n                    \n                    <Suspense fallback={<Loader/>}>\n                        <Outlet />\n                    </Suspense>\n                 \n                    </section>\n            )\n        }\n    \n        if (status === 'rejected') {\n            return <div>{error}</div>\n        }\n    }\n\n\n    // if (status === 'idle') {\n    //     return (\n    //         <div>           \n    //             <b>MovieDatails:</b> сторінка з детальною інформацією про кінофільм - {movieId}.\n    //             <button type=\"button\">Go back</button>\n    //         </div>\n    //     )\n    // }\n\n    // if (status === 'pending') {\n    //    return <Loader/>\n    // }\n\n    // if (status === 'resolved') {\n    //     // console.log(movie);\n    //     const imgBaseURL = 'https://image.tmdb.org/t/p/w500'\n    //     const { title, overview, release_date:releaseDate, genres, poster_path:poster, vote_average:vote } = movie;\n\n    //     return (\n    //         <div>\n    //             <Link to={backLinkLocationRef.current} >Go back</Link>\n    //             { movie &&\n    //             <>\n                   \n    //                 <div style={{outline: '1px solid teal'}}>\n    //                 <img src={imgBaseURL+poster} alt=\"\" width={320}/>\n    //                 <h2>{title} ({releaseDate})</h2>\n    //                 <p>User Score: {Number(vote) * 10}%  </p>\n    //                 <h3>Overview</h3>\n    //                 <p>{overview}</p>\n    //                 <h3>Genres</h3>\n    //                 <p>{genres.map(item => item.name).join(' ')}</p>\n    \n    //             </div>\n    //             <div>\n    //                 <p>Additional information</p>\n    //                 <ul>\n    //                 <li>\n    //                     <Link to={'cast'}>Cast</Link>\n    //                 </li>\n    //                 <li>\n    //                     <Link to={'reviews'}>Reviews</Link>\n    //                 </li>\n    //             </ul>\n    //             </div>\n    //             </>}\n                \n    //             <Suspense fallback={<Loader/>}>\n    //                 <Outlet />\n    //             </Suspense>\n             \n    //             </div>\n    //     )\n    // }\n\n    // if (status === 'rejected') {\n    //     return <div>{error}</div>\n    // }\n\n    return (\n        <>\n        <Link to={backLinkLocationRef.current} >Go back</Link>\n       { renderMarkup() }\n        </>\n        )\n}\n\nexport default MovieDatails;","const API_KEY = 'ef2f22bb4de9529af845b70082225b5a';\n\nconst imgBaseURL = 'https://image.tmdb.org/t/p/w500'\n\n\nconst fetchTrending = async (signal) => {\n   const fetchURL = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n\n   const response = await fetch(fetchURL, { signal })\n   const data = await response.json()\n    return data\n}\n\nconst fetchMovieByQuery = async (query) => {\n    const fetchURL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n \n    const response = await fetch(fetchURL)\n    const data = await response.json()\n     return data\n}\n\nconst fetchMovieDetails = async (movieID) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL)\n    const data = await response.json()\n    // console.log(data);\n    return data\n}\n\nconst fetchMovieCast = async (movieID) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`\n \n    const response = await fetch(fetchURL)\n    const data = await response.json()\n     return data\n}\n\nconst fetchMovieReviews = async (movieID) => {\n    const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n \n    const response = await fetch(fetchURL)\n    const data = await response.json()\n     return data\n}\n\nexport const moviesAPI = {\n    getTrending: fetchTrending,\n    getMovies: fetchMovieByQuery,\n    getDetails: fetchMovieDetails,\n    getCast: fetchMovieCast,\n    getReviews: fetchMovieReviews,\n    imgBaseURL,\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","movie","setMovie","error","setError","status","setStatus","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","fetchData","moviesAPI","data","success","to","current","type","title","overview","releaseDate","release_date","genres","poster","poster_path","vote","vote_average","style","paddingTop","paddingBottom","outline","src","alt","width","Number","map","item","name","join","Suspense","fallback","renderMarkup","API_KEY","fetchTrending","signal","fetchURL","fetch","response","json","fetchMovieByQuery","query","fetchMovieDetails","movieID","fetchMovieCast","fetchMovieReviews","getTrending","getMovies","getDetails","getCast","getReviews","imgBaseURL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}